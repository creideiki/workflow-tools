#! /bin/bash

usage()
{
    cat <<EOF >&2
usage: $(basename $0) list
       $(basename $0) <command> (<pullrequest#>)
       $(basename $0) <command> <github-fork>:<branch> <pullrequest#>

GitHub pull request helper.

Assumptions: upstream/master is the master branch of the upsteam
repository

Commands:

list:   List open pull requests in the upstream repository.

show <pr#>: Show detailed information about a pull request.

pull <pr#>: Pulls forked branch into local branch of upstream/master, and
        leaves it in a non-committed state for inspection and testing.

commit: Commits merge with a GPG signed constructed commit message.

push:   Pushes to "upstream master" and cleans up temporary branch.

reset:  Resets working copy to local master and deletes the temporary
        pull request branch.

WARNING: No github API validation of the PR is done.
EOF
    exit 1
}

github-list()
{
    local org repo
    org=$(git remote get-url upstream | cut -d: -f2 | cut -d/ -f1)
    repo=$(basename $(git remote get-url upstream | cut -d: -f2 | cut -d/ -f2) .git)
    curl --silent https://api.github.com/repos/$org/$repo/pulls | \
        jq -r \
           '.[] |
            @text "\(.number) (\(.head.label)): \(.title)"'
}

github-show()
{
    [ $# = 2 ] || usage

    local org repo num
    org=$(git remote get-url upstream | cut -d: -f2 | cut -d/ -f1)
    repo=$(basename $(git remote get-url upstream | cut -d: -f2 | cut -d/ -f2) .git)
    curl --silent https://api.github.com/repos/$org/$repo/pulls/$2 | \
        jq -r \
           '@text
"Pull request #\(.number): \(.title)
URL: \(.html_url)
Label: \(.head.label)
\(.commits) commits
State: \(.state)
Last update: \(.updated_at)
Created by: \(.user.login)
From repo: \(.head.repo.full_name)
Branch: \(.head.ref)

\(.body)"'
}

github-pull()
{
    [ $# = 2 ] || usage

    local org repo preq json source branch source_url merge_base merge_head
    org=$(git remote get-url upstream | cut -d: -f2 | cut -d/ -f1)
    repo=$(basename $(git remote get-url upstream | cut -d: -f2 | cut -d/ -f2) .git)
    preq=$2
    json=$(curl --silent https://api.github.com/repos/$org/$repo/pulls/$preq)
    source=$(<<< $json jq -r '@text "\(.head.repo.owner.login)"')
    branch=$(<<< $json jq -r '@text "\(.head.ref)"')
    source_url=https://github.com/$(<<< $json jq -r '@text "\(.head.repo.full_name)"')

    git checkout -b ${source}-${branch} upstream/master || return
    git pull --ff-only || return
    git pull --no-ff --verify-signatures --no-commit "$source_url" "$branch" || return
    merge_base=$(cat "$topdir/.git/ORIG_HEAD")
    merge_head=$(cat "$topdir/.git/MERGE_HEAD")

    cat <<EOF >$msgfile
Merge pull request #$preq from $source/$branch

EOF
    git log --pretty='* %h %s' $merge_base..$merge_head >>$msgfile
}

github-commit()
{
    git commit -S -e -F $msgfile || return
}

parse-command-line()
{
    [ $# = 3 ] || usage

    upstream_url=$(git remote get-url upstream)
    project=$(basename $upstream_url .git)
    source=$(<<< "$2" cut -d: -f1 --only-delimited)
    branch=$(<<< "$2" cut -d: -f2 --only-delimited)
    [ -z "$source" -o -z "$branch" ] && usage
    source_url=https://github.com/$source/$project
    preq=$3
}

github-push()
{
    parse-command-line "$@"

    git push upstream HEAD:master && rm $msgfile
    git checkout master
    git branch -d ${source}-${branch}
}

github-reset()
{
    parse-command-line "$@"

    git reset --hard
    git checkout master
    git branch -D ${source}-${branch}
}

topdir=$(git rev-parse --show-toplevel)
msgfile="$topdir/.git/PULL_REQUEST_EDITMSG"

case "$1" in
    list|show|pull|commit|push|reset)
        eval github-$1 "$@" ;;
    *)
        usage ;;
esac
